{"version":3,"sources":["../external \"moment\"","Chart.js","audio-controls.js","home.js","serviceWorker.js","index.js"],"names":["moment","e","Error","code","module","exports","Chart","props","myChartRef","React","useRef","useEffect","ChartJs","current","type","data","options","width","height","ref","AudioControls","downloadRef","useState","isPlaying","setIsPlaying","speakersCount","setSpeakersCount","recorderRef","Container","text","style","marginTop","Button","primary","onClick","navigator","mediaDevices","getUserMedia","audio","video","then","stream","activeTracks","getTracks","recordedChunks","MediaRecorder","mimeType","addEventListener","size","push","href","URL","createObjectURL","Blob","map","track","stop","download","form","FormData","append","setIsLoading","fetch","method","body","res","json","visualize","finally","start","disabled","secondary","Label","Input","min","value","onChange","target","icon","iconPosition","placeholder","files","Home","sentiment","setSentiment","speakers","setSpeakers","topics","setTopics","isLoading","Menu","fixed","inverted","Item","as","header","Grid","columns","padded","Row","Column","Header","analizedAudio","Dimmer","active","Loader","length","src","alt","datasets","label","magnitude","backgroundColor","d3","domain","range","score","scales","yAxes","ticks","suggestedMax","suggestedMin","ratio","labels","topic","speaker_id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.655d8c87.chunk.js","sourcesContent":["if(typeof moment === 'undefined') {var e = new Error(\"Cannot find module 'moment'\"); e.code = 'MODULE_NOT_FOUND'; throw e;}\nmodule.exports = moment;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ChartJs from \"chart.js\";\n\nconst Chart = props => {\n  const myChartRef = React.useRef(null);\n  React.useEffect(() => {\n    new ChartJs(myChartRef.current, {\n      type: props.type,\n      data: props.data,\n      options: props.options\n    });\n  }, [\n    myChartRef,\n    props.data,\n    props.type,\n    props.options,\n    props.width,\n    props.height\n  ]);\n\n  return <canvas width={props.width} height={props.height} ref={myChartRef} />;\n};\nChart.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number\n};\nexport default Chart;\n","import React from \"react\";\nimport { Container, Button, Input, Label } from \"semantic-ui-react\";\n\nconst AudioControls = props => {\n  const downloadRef = React.useRef(null);\n  const [isPlaying, setIsPlaying] = React.useState(false);\n  const [speakersCount, setSpeakersCount] = React.useState(3);\n  const recorderRef = React.useRef(null);\n\n  return (\n    <Container text style={{ marginTop: \"7em\" }}>\n      <Container>\n        <Button\n          primary\n          onClick={() => {\n            const handleSuccess = function(stream) {\n              const activeTracks = stream.getTracks();\n\n              const options = { mimeType: \"audio/ogg\" };\n              const recordedChunks = [];\n              recorderRef.current = new MediaRecorder(stream, options);\n\n              recorderRef.current.addEventListener(\"dataavailable\", e => {\n                if (e.data.size > 0) {\n                  recordedChunks.push(e.data);\n                }\n              });\n\n              recorderRef.current.addEventListener(\"stop\", () => {\n                downloadRef.current.href = URL.createObjectURL(\n                  new Blob(recordedChunks)\n                );\n                activeTracks.map(track => track.stop());\n                downloadRef.current.download = \"acetest.wav\";\n                let form = new FormData();\n                form.append(\"file\", new Blob(recordedChunks));\n                form.append(\"speakers_count\", speakersCount);\n                props.setIsLoading(true);\n                fetch(\"/uploadAudio\", { method: \"post\", body: form })\n                  .then(res => res.json())\n                  .then(res => {\n                    props.visualize(res);\n                  })\n                  .finally(() => {\n                    props.setIsLoading(false);\n                  });\n              });\n\n              recorderRef.current.start();\n              setIsPlaying(true);\n            };\n\n            navigator.mediaDevices\n              .getUserMedia({ audio: true, video: false })\n              .then(handleSuccess);\n          }}\n        >\n          Start the meeting\n        </Button>\n        <Button\n          disabled={!isPlaying}\n          secondary\n          onClick={() => {\n            setIsPlaying(false);\n\n            recorderRef.current.stop();\n          }}\n        >\n          Stop the meeting\n        </Button>\n        <Label>\n          Speakers count\n          <Input\n            min={0}\n            value={speakersCount}\n            onChange={e => setSpeakersCount(e.target.value)}\n            icon=\"users\"\n            iconPosition=\"left\"\n            placeholder=\"speakers count...\"\n            type=\"number\"\n          ></Input>\n        </Label>\n      </Container>\n      <Container>\n        <a ref={downloadRef}>Download meeting</a>\n      </Container>\n      <Container>\n        <Label>\n          Upload your meeting\n          <Input\n            onChange={e => {\n              let form = new FormData();\n              form.append(\"file\", e.target.files[0]);\n              form.append(\"speakers_count\", speakersCount);\n              props.setIsLoading(true);\n              fetch(\"/uploadAudio\", { method: \"post\", body: form })\n                .then(res => res.json())\n                .then(res => {\n                  props.visualize(res);\n                })\n                .finally(() => {\n                  props.setIsLoading(false);\n                });\n            }}\n            icon=\"phoenix framework\"\n            iconPosition=\"left\"\n            placeholder=\"upload your meeting\"\n            type=\"file\"\n          ></Input>\n        </Label>\n      </Container>\n    </Container>\n  );\n};\n\nexport default AudioControls;\n","import React from \"react\";\nimport {\n  Container,\n  Header,\n  Menu,\n  Grid,\n  Loader,\n  Dimmer\n} from \"semantic-ui-react\";\nimport * as d3 from \"d3\";\nimport Chart from \"./Chart\";\nimport AudioControls from \"./audio-controls\";\n\nconst Home = () => {\n  const [sentiment, setSentiment] = React.useState({});\n  const [speakers, setSpeakers] = React.useState([]);\n  const [topics, setTopics] = React.useState([]);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  return (\n    <div>\n      <Menu fixed=\"top\" inverted>\n        <Container>\n          <Menu.Item as=\"a\" header>\n            Meeting moderator\n          </Menu.Item>\n          <Menu.Item as=\"a\">Home</Menu.Item>\n        </Container>\n      </Menu>\n      <Grid columns={3} padded>\n        <Grid.Row>\n          <Grid.Column />\n          <Grid.Column>\n            <Header>\n              <AudioControls\n                visualize={analizedAudio => {\n                  setSentiment(analizedAudio.sentiment);\n                  setSpeakers(analizedAudio.speakers);\n                  setTopics(analizedAudio.topics);\n                }}\n                setIsLoading={setIsLoading}\n              />\n            </Header>\n          </Grid.Column>\n          <Grid.Column />\n        </Grid.Row>\n        {isLoading ? (\n          <Grid.Row>\n            <Grid.Column />\n            <Grid.Column>\n              <Container style={{ width: \"600px\" }}>\n                <Dimmer active inverted>\n                  <Loader inverted>Loading</Loader>\n                </Dimmer>\n              </Container>\n            </Grid.Column>\n          </Grid.Row>\n        ) : speakers.length === 0 ? (\n          \"No data available\"\n        ) : (\n          <Grid.Row>\n            <Grid.Column>\n              <Container style={{ width: \"600px\" }}>\n                <h1>Sentiment </h1>\n                <p>How was the general feeling during the meeting</p>\n                <small>Green means more positive, and red means negative</small>\n                <img\n                  src=\"//raw.githubusercontent.com/d3/d3-scale-chromatic/master/img/RdYlGn.png\"\n                  alt=\"RdYlGn\"\n                  width=\"100%\"\n                  height=\"40\"\n                ></img>\n                <Chart\n                  width={200}\n                  height={200}\n                  type=\"bar\"\n                  data={{\n                    datasets: [\n                      {\n                        label: \"Sentiment\",\n                        data: [sentiment.magnitude],\n                        backgroundColor: [\n                          d3.interpolateRdYlGn(\n                            d3\n                              .scaleLinear()\n                              .domain([-1, 1])\n                              .range([0, 1])(sentiment.score)\n                          )\n                        ]\n                      }\n                    ]\n                  }}\n                  options={{\n                    scales: {\n                      yAxes: [\n                        {\n                          ticks: {\n                            suggestedMax: 1,\n                            suggestedMin: 0\n                          }\n                        }\n                      ]\n                    }\n                  }}\n                />\n              </Container>\n            </Grid.Column>\n            <Grid.Column>\n              <Container style={{ width: \"600px\" }}>\n                <h1>Topics covered </h1>\n                <p>What was taked about during the meeting</p>\n                <small>\n                  The size of each part of the Pie, coresponds to how long it\n                  was covered\n                </small>\n                <Chart\n                  width={200}\n                  height={200}\n                  type=\"pie\"\n                  data={{\n                    datasets: [\n                      {\n                        data: topics.map(({ ratio }) => ratio),\n                        backgroundColor: d3.schemeTableau10\n                      }\n                    ],\n\n                    // These labels appear in the legend and in the tooltips when hovering different arcs\n                    labels: topics.map(({ topic }) => topic)\n                  }}\n                  options={{\n                    scales: {\n                      yAxes: [\n                        {\n                          ticks: {\n                            suggestedMax: 1,\n                            suggestedMin: 0\n                          }\n                        }\n                      ]\n                    }\n                  }}\n                />\n              </Container>\n            </Grid.Column>\n            <Grid.Column>\n              <Container style={{ width: \"600px\" }}>\n                <h1>Speakers contriputions ratio</h1>\n                <p>How long each speaker participated to the meeting</p>\n                <small>\n                  The size of each part of the Pie, coresponds to how long the\n                  speaker talked\n                </small>\n                <Chart\n                  width={200}\n                  height={200}\n                  type=\"pie\"\n                  data={{\n                    datasets: [\n                      {\n                        data: speakers.map(({ ratio }) => ratio),\n                        backgroundColor: d3.schemeTableau10\n                      }\n                    ],\n\n                    // These labels appear in the legend and in the tooltips when hovering different arcs\n                    labels: speakers.map(({ speaker_id }) => speaker_id)\n                  }}\n                  options={{\n                    scales: {\n                      yAxes: [\n                        {\n                          ticks: {\n                            suggestedMax: 1,\n                            suggestedMin: 0\n                          }\n                        }\n                      ]\n                    }\n                  }}\n                />\n              </Container>\n            </Grid.Column>\n          </Grid.Row>\n        )}\n      </Grid>\n    </div>\n  );\n};\n\nexport default Home;\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        // eslint-disable-next-line no-use-before-define\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line no-console\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        // eslint-disable-next-line no-use-before-define\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // eslint-disable-next-line no-console\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Home />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}