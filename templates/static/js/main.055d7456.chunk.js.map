{"version":3,"sources":["../external \"moment\"","audio-controls.js","Chart.js","home.js","serviceWorker.js","index.js"],"names":["moment","e","Error","code","module","exports","AudioControls","React","useState","isPlaying","setIsPlaying","rawTranscript","setRawTranscript","setTranscript","setSpeakers","recorderRef","useRef","downloadRef","Container","text","style","marginTop","Button","primary","onClick","navigator","mediaDevices","getUserMedia","audio","video","then","stream","activeTracks","getTracks","recordedChunks","current","MediaRecorder","mimeType","addEventListener","data","size","push","href","URL","createObjectURL","Blob","map","track","stop","download","form","FormData","append","fetch","method","body","res","json","raw_transcript","speakers","transcript","start","disabled","secondary","as","ref","Chart","props","myChartRef","useEffect","ChartJs","type","options","width","height","Home","d3","domain","range","useMemo","datasets","label","backgroundColor","x","Math","random","labels","scales","yAxes","ticks","beginAtZero","Menu","fixed","inverted","Item","header","Grid","columns","padded","Row","Column","Header","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.055d7456.chunk.js","sourcesContent":["if(typeof moment === 'undefined') {var e = new Error(\"Cannot find module 'moment'\"); e.code = 'MODULE_NOT_FOUND'; throw e;}\nmodule.exports = moment;","import React from \"react\";\nimport { Container, Button } from \"semantic-ui-react\";\n\nconst AudioControls = () => {\n  const [isPlaying, setIsPlaying] = React.useState(false);\n  const [rawTranscript, setRawTranscript] = React.useState(\"\");\n  const [transcript, setTranscript] = React.useState([]);\n  const [speakers, setSpeakers] = React.useState([]);\n  const recorderRef = React.useRef(null);\n  const downloadRef = React.useRef(null);\n\n  return (\n    <Container text style={{ marginTop: \"7em\" }}>\n      <Button\n        primary\n        onClick={() => {\n          const handleSuccess = function(stream) {\n            const activeTracks = stream.getTracks();\n\n            const options = { mimeType: \"audio/ogg\" };\n            const recordedChunks = [];\n            recorderRef.current = new MediaRecorder(stream, options);\n\n            recorderRef.current.addEventListener(\"dataavailable\", e => {\n              if (e.data.size > 0) {\n                recordedChunks.push(e.data);\n              }\n            });\n\n            recorderRef.current.addEventListener(\"stop\", () => {\n              downloadRef.current.href = URL.createObjectURL(\n                new Blob(recordedChunks)\n              );\n              activeTracks.map(track => track.stop());\n\n              downloadRef.current.download = \"acetest.wav\";\n              let form = new FormData();\n              form.append(\"file\", new Blob(recordedChunks));\n              fetch(\"/uploadAudio\", { method: \"post\", body: form })\n                .then(res => res.json())\n                .then(res => {\n                  const { raw_transcript, speakers, transcript } = res;\n                  setRawTranscript(raw_transcript);\n                  setTranscript(transcript);\n                  setSpeakers(speakers);\n                  // {\n                  // \"raw_transcript\": \"hello lit again alone\",\n                  // \"speakers\": [\n                  //   {\n                  //     \"ratio\": 1.0,\n                  //     \"speaker_id\": 1\n                  //   }\n                  // ],\n                  // \"transcript\": [\n                  //   {\n                  //     \"line\": \"hello lit again alone\",\n                  //     \"speaker_id\": 1\n                  //   }\n                  // ]\n                  // }\n                });\n            });\n\n            recorderRef.current.start();\n            setIsPlaying(true);\n          };\n\n          navigator.mediaDevices\n            .getUserMedia({ audio: true, video: false })\n            .then(handleSuccess);\n        }}\n      >\n        Start the meeting\n      </Button>\n      <Button\n        disabled={!isPlaying}\n        secondary\n        onClick={() => {\n          setIsPlaying(false);\n\n          recorderRef.current.stop();\n        }}\n      >\n        Stop the meeting\n      </Button>\n      <Container as=\"h1\">\n        <a\n          ref={downloadRef}\n          href={downloadRef.current && downloadRef.current.href}\n        >\n          Download\n        </a>\n      </Container>\n      {rawTranscript}\n    </Container>\n  );\n};\n\nexport default AudioControls;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Container, Header, Menu } from \"semantic-ui-react\";\nimport ChartJs from \"chart.js\";\nimport AudioControls from \"./audio-controls\";\n\n// var myChart = new Chart(ctx, {...});\n\nconst Chart = props => {\n  const myChartRef = React.useRef(null);\n  React.useEffect(() => {\n    new ChartJs(myChartRef.current, {\n      type: props.type,\n      data: props.data,\n      options: props.options\n    });\n  }, [\n    myChartRef,\n    props.data,\n    props.type,\n    props.options,\n    props.width,\n    props.height\n  ]);\n\n  return <canvas width={props.width} height={props.height} ref={myChartRef} />;\n};\nChart.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number\n};\nexport default Chart;\n","import React from \"react\";\nimport { Container, Header, Menu, Grid } from \"semantic-ui-react\";\nimport * as d3 from \"d3\";\nimport Chart from \"./Chart\";\nimport AudioControls from \"./audio-controls\";\n\nconst sentimentScale = d3\n  .scaleLinear()\n  .domain([-1, 1])\n  .range([\"green\", \"red\"]);\n\nconst normalizer = d3\n  .scaleLinear()\n  .domain([3, 12])\n  .range([0, 1]);\n\nconst Home = () => {\n  const speakers = [\"Evi\", \"Islam\", \"Amadeus\"];\n  const topics = [\"AI\", \"Commercetools\", \"Pizza\", \"Weather\", \"Global warming\"];\n\n  const data = React.useMemo(\n    () => ({\n      datasets: [\n        {\n          label: \"AI\",\n          data: [12, 19, 3, 5, 2, 3],\n          backgroundColor: \"blue\"\n        },\n        {\n          label: \"Commercetools\",\n\n          data: [12, 19, 3, 5, 2, 3].map(x => x * Math.random()),\n          backgroundColor: \"red\"\n        }\n      ],\n      labels: speakers\n    }),\n    []\n  );\n  const options = React.useMemo(\n    () => ({\n      scales: {\n        yAxes: [\n          {\n            ticks: {\n              beginAtZero: true\n            }\n          }\n        ]\n      }\n    }),\n    []\n  );\n  return (\n    <div>\n      <Menu fixed=\"top\" inverted>\n        <Container>\n          <Menu.Item as=\"a\" header>\n            Meeting moderator\n          </Menu.Item>\n          <Menu.Item as=\"a\">Home</Menu.Item>\n        </Container>\n      </Menu>\n      <Grid columns={3} padded>\n        <Grid.Row>\n          <Grid.Column></Grid.Column>\n          <Grid.Column>\n            <Header>\n              <AudioControls />\n            </Header>\n          </Grid.Column>\n          <Grid.Column></Grid.Column>\n        </Grid.Row>\n\n        <Grid.Row>\n          <Grid.Column>\n            <Container style={{ width: \"600px\" }}>\n              <Chart\n                width={200}\n                height={200}\n                type=\"horizontalBar\"\n                data={data}\n                options={options}\n              />\n            </Container>\n          </Grid.Column>\n          <Grid.Column>\n            <Container style={{ width: \"600px\" }}>\n              <Chart\n                width={200}\n                height={200}\n                type=\"pie\"\n                data={{\n                  datasets: [\n                    {\n                      data: [10, 20, 30],\n                      backgroundColor: [\n                        \"rgba(255, 99, 132, 0.2)\",\n                        \"rgba(54, 162, 235, 0.2)\",\n                        \"rgba(255, 206, 86, 0.2)\",\n                        \"rgba(75, 192, 192, 0.2)\",\n                        \"rgba(153, 102, 255, 0.2)\",\n                        \"rgba(255, 159, 64, 0.2)\"\n                      ]\n                    }\n                  ],\n\n                  // These labels appear in the legend and in the tooltips when hovering different arcs\n                  labels: [\"Red\", \"Yellow\", \"Blue\"]\n                }}\n                options={options}\n              />\n            </Container>\n          </Grid.Column>\n          <Grid.Column>\n            <Container style={{ width: \"600px\" }}>\n              <Chart\n                width={200}\n                height={200}\n                type=\"horizontalBar\"\n                data={data}\n                options={options}\n              />\n            </Container>\n          </Grid.Column>\n        </Grid.Row>\n\n        <Grid.Row>\n          <Grid.Column>\n            <Container style={{ width: \"600px\" }}>\n              <Chart\n                width={200}\n                height={200}\n                type=\"bar\"\n                data={data}\n                options={options}\n              />\n            </Container>\n          </Grid.Column>\n          <Grid.Column>\n            <Container style={{ width: \"600px\" }}>\n              <Chart\n                width={200}\n                height={200}\n                type=\"bar\"\n                data={data}\n                options={options}\n              />\n            </Container>\n          </Grid.Column>\n          <Grid.Column>\n            <Container style={{ width: \"600px\" }}>\n              <Chart\n                width={200}\n                height={200}\n                type=\"bar\"\n                data={data}\n                options={options}\n              />\n            </Container>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Home;\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        // eslint-disable-next-line no-use-before-define\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line no-console\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        // eslint-disable-next-line no-use-before-define\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // eslint-disable-next-line no-console\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Home />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}